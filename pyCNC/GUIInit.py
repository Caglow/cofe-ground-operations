# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sat May 23 20:29:58 2009
import sys
import time

import queVars
import serIO
import threading

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

class RedirectText:
	def __init__(self, aWxTextCtrl):
		self.out = aWxTextCtrl

	def write(self, string):
		wx.CallAfter(self.out.AppendText, string)

# end wxGlade

class MyFrame(wx.Frame):

	axis = 0


	def __init__(self, * args, ** kwds):

		

		# begin wxGlade: MyFrame.__init__
		kwds["style"] = wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, * args, ** kwds)
		
		
		#self.buttonBlank1 = wx.Panel(self, -1)
		
		print "DERP"
		self.pollUpdate = wx.Timer(self)


		self.__set_properties()
		self.__do_layout()


		
		redir=RedirectText(self.StatusWin)
		sys.stdout	= redir
		sys.sterr	= redir
		print "Starting Up..."


		queVars.Qout.put({"reboot":0})					# Finally, now that we can print to the GUI, reset the galil
		queVars.Qout.put({"pollGalil":0})					# Finally, now that we can print to the GUI, reset the galil

		self.SetDoubleBuffered(True)   # Fix text flickering by forcing the container to be double-buffered.

		self.Bind(wx.EVT_TIMER, self.updateGUI, self.pollUpdate)
		self.Bind(wx.EVT_CLOSE, self.quitApp)
		# end wxGlade
		
	def __set_properties(self):
		# begin wxGlade: MyFrame.__set_properties
		self.SetTitle("Actuator Controller")
		self.SetSize((1600, 800))
		self.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_BTNFACE))
		# end wxGlade

	def __stepRelSubPanel(self):

		stepRelSubsizer = wx.BoxSizer(wx.HORIZONTAL)

		self.stepRelSliderLabel = wx.StaticText(self, -1, "Move Relative Steps")
		self.stepRelSliderLabel.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "MS Shell Dlg 2"))
		stepRelSubsizer.Add(self.stepRelSliderLabel, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.SHAPED, 0)
		
		stepRelSubsizer.Add((20, 20), 1, wx.EXPAND, 0)

		return stepRelSubsizer

	def __quickMoveButtons(self):
		quickMoveSizer = wx.BoxSizer(wx.HORIZONTAL)

		self.moveButtons =[]


		quickMoveEnableToggleButton = wx.ToggleButton(self, -1, "Enable Quick-Move")
		quickMoveEnableToggleButton.SetValue(False)
		quickMoveSizer.Add(quickMoveEnableToggleButton, 1, wx.EXPAND, 0)
		quickMoveEnableToggleButton.Bind(wx.EVT_TOGGLEBUTTON, self.toggleMoveButtons)

		movePlus10Button = wx.Button(self, -1, "+100000 ")
		quickMoveSizer.Add(movePlus10Button, 1, wx.EXPAND, 0)
		movePlus10Button.Bind(wx.EVT_BUTTON, self.moveBtnEvt)
		self.moveButtons.append(movePlus10Button)

		movePlus10000Button = wx.Button(self, -1, "+10000 ")
		quickMoveSizer.Add(movePlus10000Button, 1, wx.EXPAND, 0)
		movePlus10000Button.Bind(wx.EVT_BUTTON, self.moveBtnEvt)
		self.moveButtons.append(movePlus10000Button)

		movePlus1000Button = wx.Button(self, -1, "+1000 ")
		quickMoveSizer.Add(movePlus1000Button, 1, wx.EXPAND, 0)
		movePlus1000Button.Bind(wx.EVT_BUTTON, self.moveBtnEvt)
		self.moveButtons.append(movePlus1000Button)

		movePlus100Button = wx.Button(self, -1, "+100 ")
		quickMoveSizer.Add(movePlus100Button, 1, wx.EXPAND, 0)
		movePlus100Button.Bind(wx.EVT_BUTTON, self.moveBtnEvt)
		self.moveButtons.append(movePlus100Button)

		movePlus10Button = wx.Button(self, -1, "+10 ")
		quickMoveSizer.Add(movePlus10Button, 1, wx.EXPAND, 0)
		movePlus10Button.Bind(wx.EVT_BUTTON, self.moveBtnEvt)
		self.moveButtons.append(movePlus10Button)

		movePlus1Button = wx.Button(self, -1, "+1 ")
		quickMoveSizer.Add(movePlus1Button, 1, wx.EXPAND, 0)
		movePlus1Button.Bind(wx.EVT_BUTTON, self.moveBtnEvt)
		self.moveButtons.append(movePlus1Button)

		moveMinus1Button = wx.Button(self, -1, "-1 ")
		quickMoveSizer.Add(moveMinus1Button, 1, wx.EXPAND, 0)
		moveMinus1Button.Bind(wx.EVT_BUTTON, self.moveBtnEvt)
		self.moveButtons.append(moveMinus1Button)

		moveMinus10Button = wx.Button(self, -1, "-10 ")
		quickMoveSizer.Add(moveMinus10Button, 1, wx.EXPAND, 0)
		moveMinus10Button.Bind(wx.EVT_BUTTON, self.moveBtnEvt)
		self.moveButtons.append(moveMinus10Button)

		moveMinus100Button = wx.Button(self, -1, "-100 ")
		quickMoveSizer.Add(moveMinus100Button, 1, wx.EXPAND, 0)
		moveMinus100Button.Bind(wx.EVT_BUTTON, self.moveBtnEvt)
		self.moveButtons.append(moveMinus100Button)

		moveMinus1000Button = wx.Button(self, -1, "-1000 ")
		quickMoveSizer.Add(moveMinus1000Button, 1, wx.EXPAND, 0)
		moveMinus1000Button.Bind(wx.EVT_BUTTON, self.moveBtnEvt)
		self.moveButtons.append(moveMinus1000Button)

		moveMinus10000Button = wx.Button(self, -1, "-10000 ")
		quickMoveSizer.Add(moveMinus10000Button, 1, wx.EXPAND, 0)
		moveMinus10000Button.Bind(wx.EVT_BUTTON, self.moveBtnEvt)
		self.moveButtons.append(moveMinus10000Button)

		moveMinus10Button = wx.Button(self, -1, "-100000 ")
		quickMoveSizer.Add(moveMinus10Button, 1, wx.EXPAND, 0)
		moveMinus10Button.Bind(wx.EVT_BUTTON, self.moveBtnEvt)
		self.moveButtons.append(moveMinus10Button)

		for button in self.moveButtons:
			button.Enable(False)

		return quickMoveSizer

	def __stepRelSizer(self):

		stepRelSizer = wx.BoxSizer(wx.VERTICAL)
		stepRelSizer.Add(self.__stepRelSubPanel(), 1, wx.EXPAND, 0)

		self.stepRelSlider = wx.Slider(self, -1, 0, -100000, 100000, style = wx.SL_HORIZONTAL | wx.SL_LABELS)
		stepRelSizer.Add(self.stepRelSlider, 0, wx.EXPAND, 0)



		return stepRelSizer



	def __buttonGridPanel(self):

		stepButtonGridSizer = wx.GridSizer(3, 4, 0, 0)


		self.stepRelButton = wx.Button(self, -1, "Move Actuator Relative")
		stepButtonGridSizer.Add(self.stepRelButton, 0, wx.EXPAND, 0)
		self.Bind(wx.EVT_BUTTON, self.moveActRel, self.stepRelButton)


		self.absInputLabel = wx.StaticText(self, -1, "Absolute Value Input")
		stepButtonGridSizer.Add(self.absInputLabel, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)

		self.abPosInput = wx.SpinCtrl(self, -1, "", min = -1000000000, max = 1000000000)
		stepButtonGridSizer.Add(self.abPosInput, 0, wx.EXPAND, 0)



		self.stepAbsButton = wx.Button(self, -1, "Move Actuator Absolute")
		stepButtonGridSizer.Add(self.stepAbsButton, 0, wx.EXPAND, 0)
		self.Bind(wx.EVT_BUTTON, self.evtMoveActAbs, self.stepAbsButton)

		#self.setAbsButton = wx.Button(self, -1, "Move Actuator Absolute")
		stepButtonGridSizer.Add((10,10))
		#self.Bind(wx.EVT_BUTTON, self.setActAbs, self.setAbsButton)

		self.speedInputLabel = wx.StaticText(self, -1, "Max Speed Input")
		stepButtonGridSizer.Add(self.speedInputLabel, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)

		self.maxSpeedInput = wx.SpinCtrl(self, -1, "", min = -1400000, max = 1400000)
		stepButtonGridSizer.Add(self.maxSpeedInput, 0, wx.EXPAND, 0)

		self.setMaxSpeedButton = wx.Button(self, -1, "Set Actuator Speed")
		stepButtonGridSizer.Add(self.setMaxSpeedButton, 0, wx.EXPAND, 0)
		self.Bind(wx.EVT_BUTTON, self.evtChangeMoveSpeed, self.setMaxSpeedButton)



		#self.setAbsButton = wx.Button(self, -1, "Move Actuator Absolute")
		stepButtonGridSizer.Add((10,10))
		#self.Bind(wx.EVT_BUTTON, self.setActAbs, self.setAbsButton)

		self.moveVelocityInputLabel = wx.StaticText(self, -1, "Max Speed Input")
		stepButtonGridSizer.Add(self.moveVelocityInputLabel, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)

		self.moveVelocityInput = wx.SpinCtrl(self, -1, "", min = -1400000, max = 1400000)
		stepButtonGridSizer.Add(self.moveVelocityInput, 0, wx.EXPAND, 0)

		self.moveAtVelocityBtn = wx.Button(self, -1, "Set Actuator Speed")
		stepButtonGridSizer.Add(self.moveAtVelocityBtn, 0, wx.EXPAND, 0)
		self.Bind(wx.EVT_BUTTON, self.evtMoveAtVelocity, self.moveAtVelocityBtn)



		return stepButtonGridSizer

	def __actControlPanel(self):

		actControlSizer = wx.BoxSizer(wx.HORIZONTAL)
		actControlSizer.Add(self.__stepRelSizer(), 1, wx.ALL | wx.EXPAND, 0)
		actControlSizer.Add(self.__buttonGridPanel(), 0, wx.LEFT | wx.RIGHT, 5)

		return actControlSizer

	def __statusFeedbackPanel(self):
		headerSizer = wx.BoxSizer(wx.VERTICAL)

		self.axisInfoHeaderText = wx.StaticText(self, -1, "Axis Status:     ")
		headerSizer.Add(self.axisInfoHeaderText, 0, 0, 0)

		self.axis1HeaderText = wx.StaticText(self, -1, "Axis 0")
		self.axis2HeaderText = wx.StaticText(self, -1, "Axis 1")

		self.axis1PosText = wx.StaticText(self, -1, "bWuh1?")
		self.axis2PosText = wx.StaticText(self, -1, "bWuh2?")
		self.axis1VelText = wx.StaticText(self, -1, "bWuh3?")
		self.axis2VelText = wx.StaticText(self, -1, "bWuh4?")

		self.axis1MovText = wx.StaticText(self, -1, "bWuh3?")
		self.axis2MovText = wx.StaticText(self, -1, "bWuh4?")

		self.statusHeaderVR1 = wx.StaticLine(self, -1, style = wx.LI_HORIZONTAL)				#---------------------
		headerSizer.Add(self.statusHeaderVR1, 0, wx.EXPAND | wx.LEFT | wx.RIGHT , 5)


		headerSizer.Add(self.axis1HeaderText, 0, 0, 0)
		headerSizer.Add(self.axis1PosText, 0, 0, 0)
		headerSizer.Add(self.axis1VelText, 0, 0, 0)
		headerSizer.Add(self.axis1MovText, 0, 0, 0)

		self.statusHeaderVR2 = wx.StaticLine(self, -1, style = wx.LI_HORIZONTAL)				#---------------------
		headerSizer.Add(self.statusHeaderVR2, 0, wx.EXPAND | wx.LEFT | wx.RIGHT , 5)


		headerSizer.Add(self.axis2HeaderText, 0, 0, 0)
		headerSizer.Add(self.axis2PosText, 0, 0, 0)
		headerSizer.Add(self.axis2VelText, 0, 0, 0)
		headerSizer.Add(self.axis2MovText, 0, 0, 0)


		return headerSizer

	def __controlsPanel(self):

		overallControlsSizer = wx.BoxSizer(wx.VERTICAL)

		self.actContWinLabel = wx.StaticText(self, -1, "Actuator Controls")
		self.actContWinLabel.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "MS Shell Dlg 2"))

		overallControlsSizer.Add(self.actContWinLabel, 3, wx.EXPAND, 0)


		self.interfaceHR = wx.StaticLine(self, -1)
		overallControlsSizer.Add(self.interfaceHR, 0, wx.EXPAND, 0)

		overallControlsSizer.Add(self.__actControlPanel(), 0, wx.ALL | wx.EXPAND, 5)

		overallControlsSizer.Add(self.__quickMoveButtons(), 0, wx.EXPAND, 0)

		return overallControlsSizer

	def __statusSidePanel(self):
		
		axSelSizer = wx.BoxSizer(wx.VERTICAL)


		self.btnGoHome = wx.Button(self, -1, "Home Axis")
		axSelSizer.Add(self.btnGoHome, 0, wx.EXPAND | wx.ALL, 5)
		self.Bind(wx.EVT_BUTTON, self.evtGoHome, self.btnGoHome)

		self.statusSideBarHR0 = wx.StaticLine(self, -1)				#---------------------
		axSelSizer.Add(self.statusSideBarHR0, 0, wx.EXPAND | wx.ALL, 5)


		self.getPositionButton = wx.Button(self, -1, "Get Position")
		axSelSizer.Add(self.getPositionButton, 0, wx.EXPAND | wx.ALL, 5)
		self.Bind(wx.EVT_BUTTON, self.getPositionStatus, self.getPositionButton)

		self.getVelocityButton = wx.Button(self, -1, "Get Velocity")
		axSelSizer.Add(self.getVelocityButton, 0, wx.EXPAND | wx.ALL, 5)
		self.Bind(wx.EVT_BUTTON, self.getVelocityStatus, self.getVelocityButton)

		self.statusSideBarHR1 = wx.StaticLine(self, -1)				#---------------------
		axSelSizer.Add(self.statusSideBarHR1, 0, wx.EXPAND | wx.ALL, 5)

		self.movementStartButton = wx.Button(self, -1, "Motion Start")
		axSelSizer.Add(self.movementStartButton, 0, wx.EXPAND | wx.ALL, 5)
		self.Bind(wx.EVT_BUTTON, self.evtMotionStart, self.movementStartButton)

		self.movementStopButton = wx.Button(self, -1, "Motion Stop")
		axSelSizer.Add(self.movementStopButton, 0, wx.EXPAND | wx.ALL, 5)
		self.Bind(wx.EVT_BUTTON, self.evtMotionStop, self.movementStopButton)


		self.statusSideBarHR4 = wx.StaticLine(self, -1)				#---------------------
		axSelSizer.Add(self.statusSideBarHR4, 0, wx.EXPAND | wx.ALL, 5)


		self.motorsOnButton = wx.Button(self, -1, "Motors On")
		axSelSizer.Add(self.motorsOnButton, 0, wx.EXPAND|wx.ALL, 5)
		self.Bind(wx.EVT_BUTTON, self.evtMotorsOn, self.motorsOnButton)

		self.motorsOffButton = wx.Button(self, -1, "Motors Off")
		axSelSizer.Add(self.motorsOffButton, 0, wx.EXPAND|wx.ALL, 5)
		self.Bind(wx.EVT_BUTTON, self.evtMotorsOff, self.motorsOffButton)

		self.statusSideBarHR2 = wx.StaticLine(self, -1)				#---------------------
		axSelSizer.Add(self.statusSideBarHR2, 0, wx.EXPAND | wx.ALL, 5)

		self.btnRebootMCU = wx.Button(self, -1, "Reset Galil")
		axSelSizer.Add(self.btnRebootMCU, 0, wx.EXPAND | wx.ALL, 5)
		self.Bind(wx.EVT_BUTTON, self.evtRebootMCU, self.btnRebootMCU)


		self.statusSideBarHR3 = wx.StaticLine(self, -1)				#---------------------
		axSelSizer.Add(self.statusSideBarHR3, 0, wx.EXPAND | wx.ALL, 5)


		axList = []
		err = 0
		while 1:
			err += 1
			try:
				numAx = queVars.gInt.numAxis
				break
			except:
				if err > 500:
					raise IOError
				time.sleep(0.01)
				pass


		for x in range(numAx):
			axList.append("Axis %d" % x)

		self.axSelRadioButton = wx.RadioBox(self, -1, "Axis Select", majorDimension = 1, choices = axList)
		axSelSizer.Add(self.axSelRadioButton, 0, 0, 0)


		self.Bind(wx.EVT_RADIOBOX, self.evtChangeAxis, self.axSelRadioButton)





		return axSelSizer
	
	
	def __statusPanel(self):


		statusAndPotSizer = wx.BoxSizer(wx.HORIZONTAL)

		self.StatusWin = wx.TextCtrl(self, -1, "", style = wx.TE_MULTILINE | wx.TE_READONLY)
		self.TextCtrlFont = wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')
		self.StatusWin.SetFont(self.TextCtrlFont)

		statusAndPotSizer.Add(self.StatusWin, 1, wx.ALL | wx.EXPAND, 0)

		statusAndPotSizer.Add(self.__statusFeedbackPanel(), 0, wx.EXPAND, 0)


		self.statusVR1 = wx.StaticLine(self, -1, style = wx.LI_VERTICAL)
		statusAndPotSizer.Add(self.statusVR1, 0, wx.EXPAND, 0)

		statusAndPotSizer.Add(self.__statusSidePanel(), 0, wx.ALL | wx.EXPAND, 0)

		return statusAndPotSizer

	def __do_layout(self):
		# begin wxGlade: MyFrame.__do_layout
		

		mainSizer = wx.BoxSizer(wx.VERTICAL)
		mainSizer.Add(self.__controlsPanel(), 0, wx.EXPAND, 0)
		mainSizer.Add(self.__statusPanel(), 1, wx.EXPAND, 0)
		self.SetSizer(mainSizer)
		
		self.Layout()
		# end wxGlade

	def evtChangeAxis(self, event):
		axStr = self.axSelRadioButton.GetStringSelection()
		self.axis = int(axStr.split()[-1])

	def moveActRel(self, event): # wxGlade: MyFrame.<event_handler>
		distance = self.stepRelSlider.GetValue()
		queVars.Qout.put({"moveRelative": (self.axis, distance)})
		event.Skip()

	def getPositionStatus(self, event): # wxGlade: MyFrame.<event_handler>
		queVars.Qout.put({"getPositionStatus": 0})
		#print self.comPorts
		event.Skip()

	def getVelocityStatus(self, event): # wxGlade: MyFrame.<event_handler>
		queVars.Qout.put({"getVelocityStatus": 0})
		#print self.comPorts
		event.Skip()

	def evtMoveActAbs(self, event): # wxGlade: MyFrame.<event_handler>
		distance = self.abPosInput.GetValue()
		print " MoveAbs", distance
		queVars.Qout.put({"moveAbsolute": (self.axis, distance)})
		event.Skip()

	def evtGoHome(self, event):
		queVars.Qout.put({"homeAxis": self.axis})
		event.Skip()

	def setActAbs(self, event): # wxGlade: MyFrame.<event_handler>
		dial = wx.MessageDialog(None, 'ReZero Actuator? Current position info will be lost.', 'Confirm', wx.OK | wx.CANCEL | wx.ICON_EXCLAMATION | wx.STAY_ON_TOP)
		if dial.ShowModal() == wx.ID_OK:
			distance = self.abPosInput.GetValue()
			queVars.Qout.put({"setAbs": (self.axis, distance)})

		event.Skip()

	def evtChangeMoveSpeed(self, event):
		
		speed = self.maxSpeedInput.GetValue()
		print " Set Move Speed", speed
		queVars.Qout.put({"setMoveSpeed": (self.axis, speed)})
		event.Skip()

		
	def evtMoveAtVelocity(self, event):

		speed = self.moveVelocityInput.GetValue()
		print " Move axis at Velocity", speed
		queVars.Qout.put({"moveAtSpeed": (self.axis, speed)})
		event.Skip()


	def evtMotionStart(self, event):
		queVars.Qout.put({"beginMotion": None})
		event.Skip()

	def evtMotionStop(self, event):
		queVars.Qout.put({"endMotion": None})
		event.Skip()


	def evtMotorsOn(self, event):
		queVars.Qout.put({"motorOn": None})
		event.Skip()

	def evtMotorsOff(self, event):
		queVars.Qout.put({"motorOff": None})
		event.Skip()


	def evtRebootMCU(self, event):
		queVars.Qout.put({"reboot": ""})
		event.Skip()
		
	# end of class MyFrame

	def toggleMoveButtons(self, event):
		enableValue = event.GetEventObject().GetValue()

		for button in self.moveButtons:
			button.Enable(enableValue)
		if enableValue:
			event.GetEventObject().Label = "Disable Quick-Move"
			print "Enabling Quick-Move buttons."
			print "Be careful, the system will move immediately upon every button-press"
		else:
			event.GetEventObject().Label = "Enable Quick-Move"


	def moveBtnEvt(self, event):
						# I'm doing some jiggery-pokery here. All the quick-move buttons trigger the same event.
						# Therefore, I look up the triggering button, and access it's label string.
						# since the button labels are int strings, I can get the desired movement ammount by simply converrting the button
						# labe string to an int.

		distance = int(event.GetEventObject().Label)

		queVars.Qout.put({"moveRelative": (self.axis, distance)})
		queVars.Qout.put({"beginMotion": self.axis})

	def updateGUI(self, event): # wxGlade: MainW.<event_handler>		Main Polling Loop

		#if self.potGaugePollCheckbox.IsChecked():
		#	self.potGauge.SetValue(abs(self.stepRelSlider.GetValue()))

		try:

			self.axis1PosText.SetLabel("Pos = %d" % queVars.gInt.pos[0])
			self.axis1VelText.SetLabel("Vel = %d" % queVars.gInt.vel[0])
			self.axis1MovText.SetLabel("Moving" if queVars.gInt.inMot[0] else "Stationary" )

			self.axis2PosText.SetLabel("Pos = %d, " % queVars.gInt.pos[1])
			self.axis2VelText.SetLabel("Vel = %d, " % queVars.gInt.vel[1])
			self.axis2MovText.SetLabel("Moving" if queVars.gInt.inMot[1] else "Stationary")
			self.Layout()
		except:
			pass


		while not queVars.Qin.empty():
			temp = queVars.Qin.get()
			print temp


		activeThreads = "%s" % (threading.enumerate())
		if not "serThread" in activeThreads:
			
			print "Serial Interface Thread Crashed, attempting to restart"
			queVars.serThread = threading.Thread(target = serIO.mainLoop, name = "serThread")
			queVars.serThread.start()
			activeThreads = "%s" % (threading.enumerate())
			if "serThread" in activeThreads:
				print "Restarted"
		
				
			event.Skip()


	def quitApp(self, event): # wxGlade: MainFrame.<event_handler>
		print "Exiting"

		queVars.Qout.put({"Shutdown" : ""})
		time.sleep(.1)
		queVars.serThread.join(.25)

		sys.exit(0)


class MyApp(wx.App):
	def OnInit(self):
		wx.InitAllImageHandlers()
		mainFrame = MyFrame(None, -1, "")
		self.SetTopWindow(mainFrame)
		mainFrame.Show()
		mainFrame.pollUpdate.Start(25, 0)
		return 1
	
